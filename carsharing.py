# -*- coding: utf-8 -*-
"""
File Name: carsharing.py
Description: This script initializes a FastAPI web application for a car sharing
 service. It provides endpoints for welcoming users, retrieving a list of
 available cars filtered by size and number of doors, and adding new cars to the
 database.
Author: MathTeixeira
Date: June 29, 2024
Version: 1.0.0
License: MIT License
Contact Information: mathteixeira55
"""

### Imports ###
from contextlib import asynccontextmanager
from fastapi import Depends, FastAPI, HTTPException
from repositories.carRepository import CarRepository
from schemas.carSchema import CarSchema
from schemas.tripSchema import TripSchema
from schemas.responseSchema import ResponseSchema
from models.carModel import CarModel, CarModel2
from models.tripModel import TripModel, TripModel2
from utils.docDetails import sizeQuery, doorsQuery, idPath
from database.database import Database
from sqlmodel import SQLModel, Session, select

### Global Variables ###
carsDb = Database()


### Lifespan Events ###
# Putting the database initialization in the lifespan event will ensure that the
# database tables are created only after the code is loaded giving it the chance
# to create the tables based on the models.
@asynccontextmanager
async def lifespan(app: FastAPI):
  global carsDb
  # Startup code here
  print("Starting up...")
  # Any setup code or database connections can go here
  carsDb.init()

  yield
  # Shutdown code here
  print("Shutting down...")
  # Any cleanup code or closing connections can go here


# Initialize the repository
carRepository = CarRepository("./database/carsDb.json")

### Initialize FastAPI App ###
app = FastAPI(title="Car Sharing API", version="1.0.0", lifespan=lifespan)


### API Endpoints ###
# Health Check Endpoint
@app.get("/",
         tags=["Health Check"],
         summary="Health Check",
         response_model=ResponseSchema)
def welcome() -> ResponseSchema:
  """
  Welcome endpoint for the Car Sharing API.

  Returns:
    ResponseSchema: A dictionary containing a welcome message.
  """
  return ResponseSchema(message="Welcome to the Car Sharing API!", code=200)


# CRUD Operations for Cars
# Create
@app.post("/api/cars",
          tags=["Cars"],
          summary="Add new car",
          response_model=ResponseSchema)
def addCar(
    car: CarSchema, session: Session = Depends(carsDb.getSession)
) -> ResponseSchema:
  """
  Add a new car to the database.

  Args:
    car (CarSchema): The car to add.

  Returns:
    ResponseSchema: A dictionary containing a success message and the added car's ID.
  """
  # if not using injection, use the session context manager
  # with Session(carsDb.engine) as session:
  carToAdd = CarModel2.model_validate(car)
  session.add(carToAdd)
  session.commit()
  # Refresh the carToAdd object to get the ID generated by the database
  session.refresh(carToAdd)

  return ResponseSchema(message=carToAdd, code=200)


# Read "All" filtered by size and doors
@app.get(
    "/api/cars",
    tags=["Cars"],
    summary="Get cars filtered by size and number of doors",
    response_model=ResponseSchema,
)
def getCars(
    size: str | None = sizeQuery,
    doors: int | None = doorsQuery,
    session: Session = Depends(carsDb.getSession)
) -> ResponseSchema:
  """
  Retrieve cars filtered by size and number of doors.

  Args:
    size (str, optional): The size to filter cars by (s, m, l).
    doors (int, optional): The number of doors to filter cars by.

  Returns:
    ResponseSchema: A dictionary containing the list of cars filtered by size and number of doors.

  Raises:
    HTTPException: If no cars are available in the database.
  """
  # if not using injection, use the session context manager
  # with Session(carsDb.engine) as session:
  query = select(CarModel2)
  if size:
    query = query.where(CarModel2.size == size)
  if doors:
    query = query.where(CarModel2.doors == doors)
  # Execute the query and return the results
  # all() returns a list of all the results, if all() is not used,
  # an iterator is returned
  filteredCars = session.exec(query).all()

  return ResponseSchema(message=filteredCars, code=200)


# Read one by ID
@app.get(
    "/api/cars/{id}",
    tags=["Cars"],
    summary="Get car by ID",
    response_model=ResponseSchema,
)
def getCarById(
    id: int = idPath,
    session: Session = Depends(carsDb.getSession)
) -> ResponseSchema:
  """
  Retrieve a car by its ID.

  Args:
    id (int): The ID of the car to retrieve.

  Returns:
    ResponseSchema: A dictionary containing the car details if found, otherwise a message indicating it was not found.
  """
  # get() looks for the object by its primary key and returns None if not found
  car = session.get(CarModel2, id)
  if not car:
    raise HTTPException(status_code=404, detail=f"Car with id ${id} not found")
  return ResponseSchema(message=car, code=200)


# Update
@app.put("/api/cars/{id}",
         tags=["Cars"],
         summary="Update car by ID",
         response_model=ResponseSchema)
def updateCar(
    id: int = idPath,
    car: CarSchema = None,
    session: Session = Depends(carsDb.getSession)
) -> ResponseSchema:
  """
  Update a car in the database by its ID.

  Args:
    id (int): The ID of the car to update.
    car (CarSchema): The updated car data.

  Returns:
    ResponseSchema: A dictionary containing the updated car details if found, otherwise a message indicating it was not found.
  """
  # get() looks for the object by its primary key and returns None if not found
  carToUpdate = session.get(CarModel2, id)

  if not carToUpdate:
    raise HTTPException(status_code=404, detail=f"Car with id ${id} not found")

  # Update the car attributes with the new values
  updatedCar = carToUpdate.update(car)

  # Save the updated repository to the database
  session.commit()
  return ResponseSchema(message=updatedCar, code=200)


# Delete
@app.delete("/api/cars/{id}",
            tags=["Cars"],
            summary="Delete car by ID",
            response_model=ResponseSchema)
def deleteCar(
    id: int = idPath,
    session: Session = Depends(carsDb.getSession)
) -> ResponseSchema:
  """
  Delete a car from the database by its ID.

  Args:
    id (int): The ID of the car to delete.

  Returns:
    ResponseSchema: A dictionary containing a success message if the car was deleted, otherwise a message indicating it was not found.
  """
  # get() looks for the object by its primary key and returns None if not found
  car = session.get(CarModel2, id)

  if not car:
    raise HTTPException(status_code=404, detail=f"Car with id ${id} not found")

  session.delete(car)
  session.commit()
  return ResponseSchema(
      message=f"Car with ID {id} deleted successfully.\n${car}", code=200)


# CRUD Operations for Trips
# Create
@app.post("/api/trips/{carId}",
          tags=["Trips"],
          summary="Add trip by car ID",
          response_model=ResponseSchema)
def addTrip(
    carId: int,
    trip: TripSchema = None,
    session: Session = Depends(carsDb.getSession)
) -> ResponseSchema:
  """
  Add a trip to a car by its ID.

  Args:
    id (int): The ID of the car to add a trip to.
    trip (TripSchema): The trip data to add.

  Returns:
    ResponseSchema: A dictionary containing the updated car details with the added trip if found, otherwise a message indicating it was not found.
  """
  # get() looks for the object by its primary key and returns None if not found
  carToUpdate = session.get(CarModel2, carId)

  if not carToUpdate:
    raise HTTPException(status_code=404,
                        detail=f"Car with id ${carId} not found")

  # Add the trip to the car's trips list
  tripModel = TripModel2.model_validate(trip, update={"carId": carId})
  carToUpdate.addTrip(tripModel)

  session.commit()
  session.refresh(carToUpdate)

  return ResponseSchema(message=carToUpdate, code=200)


if __name__ == "__main__":
  import uvicorn

  uvicorn.run("carsharing:app", host="0.0.0.0", port=8000, reload=True)
